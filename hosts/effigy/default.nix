# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  inputs,
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports =
    with inputs;
    [
      (modulesPath + "/installer/scan/not-detected.nix")
      disko.nixosModules.disko
      sops-nix.nixosModules.sops
    ]
    ++ (with nixos-hardware.nixosModules; [
      common-cpu-intel
      common-gpu-nvidia
      common-pc-laptop
      common-pc-ssd
    ]);

  boot = {
    initrd = {
      availableKernelModules = [
        "xhci_pci"
        "ahci"
        "nvme"
        "sdhci_pci"
      ];
      kernelModules = [ "dm-snapshot" ];
    };
    kernelModules =
      if (lib.versionAtLeast config.boot.kernelPackages.kernel.version "6.1") then
        [
          "kvm-intel"
          "hp-wmi"
        ]
      else
        [
          "kvm-intel"
        ];
    kernelPackages = pkgs.linuxPackages_latest;
    kernelParams = [ "quiet" ];

    loader = {
      grub = {
        device = "nodev";
        efiSupport = true;
        useOSProber = true;
      };
      efi.canTouchEfiVariables = true;
    };

    tmp.useZram = true;
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/2df715a3-c265-43c1-84f5-c7406fa518bb";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/B42A-5D36";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/3c295ba2-ab0c-41d0-ae62-6718eeb7b66d";
    fsType = "ext4";
  };

  sops.age.keyFile = "/root/.config/sops/age/keys.txt";

  networking = {
    hostName = "effigy";
    networkmanager = {
      enable = true;
      wifi = {
        backend = "iwd";
        powersave = true;
      };
    };

    # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
    # (the default) this is the recommended approach. When using systemd-networkd it's
    # still possible to use this option, but it's recommended to use it in conjunction
    # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
    useDHCP = lib.mkDefault true;
  };

  programs = {
    steam.enable = true;
  };

  services = {
    greetd = {
      enable = true;
      settings = {
        default_session = {
          command = "${pkgs.tuigreet}/bin/tuigreet";
        };
      };
    };
    xserver.videoDrivers = [
      "nvidia"
      "intel"
    ];
    pipewire = {
      enable = true;
      jack.enable = true;
    };

    udisks2.enable = true;
    power-profiles-daemon.enable = true;
    upower.enable = true;
  };

  nixpkgs = {
    hostPlatform = lib.mkDefault "x86_64-linux";
    config.allowUnfree = true;
  };

  hardware = {
    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    bluetooth.enable = true;
    graphics = {
      enable = true;
      enable32Bit = true;
    };
    nvidia = {
      open = true;
      modesetting.enable = true;
      nvidiaSettings = false;
      prime = {
        offload = {
          enable = true;
          enableOffloadCmd = true;
        };
        intelBusId = "PCI:0:2:0";
        nvidiaBusId = "PCI:1:0:0";
      };
      powerManagement = {
        enable = true;
        finegrained = true;
      };
    };
    nvidia-container-toolkit.enable = true;
  };

  powerManagement = {
    enable = true;
    powertop.enable = true;
  };

  zramSwap.enable = true;
}
